{"version":3,"sources":["AskQuestion.js","Questions.js","PostAnswer.js","Question.js","App.js","index.js"],"names":["AskQuestion","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","input","event","setState","defineProperty","target","name","value","askQuestion","_this2","react_default","a","createElement","Fragment","className","onChange","type","placeholder","onClick","onSubmit","Component","Questions","list","questions","map","elm","key","id","style","textAlign","es","textDecoration","fontSize","to","question","listStyleType","AskQuestion_AskQuestion","text","PostAnswer","postAnswer","_","Question","handleVote","bind","assertThisInitialized","answerId","currentTarget","dataset","getQuestion","content","answers","answer","votes","src_PostAnswer","App","API_URL","process","getData","url","fetch","result","json","find","q","parseFloat","questionId","concat","method","headers","Content-type","then","response","console","log","putVote","Content-Type","body","JSON","stringify","data","postData","_this3","array","_this4","color","src_Questions","path","src_Question","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.17b50004.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\n\r\n\r\n\r\nexport default class AskQuestion extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            input: \"\"\r\n        };\r\n    }\r\n    onChange(event) {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n    }\r\n\r\n    onSubmit(event) {\r\n        this.props.askQuestion(this.state.input);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n\r\n\r\n                    <div className=\"form-group\">\r\n\r\n                        <input name=\"input\" onChange={(event) => this.onChange(event)}\r\n                                type=\"text\" placeholder=\"Ask a new question\"\r\n                        />\r\n                        <button onClick={(event) => this.onSubmit(event)}>Ask question</button>\r\n                    </div>\r\n\r\n\r\n            </>\r\n        );\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport {Link} from \"@reach/router\";\r\nimport AskQuestion from \"./AskQuestion\";\r\n\r\nclass Questions extends Component{\r\n\r\n\r\n\r\n\r\n    render() {\r\n        //Map the questions to the question component by using props\r\n        //Pass the question id to the link path\r\n\r\n        const mapFunction = (elm) =>\r\n            <li key={elm.id} style={{textAlign: \"center\"}}>\r\n                <Link style={{textDecoration: \"none\", fontSize:\"2em\"}} to={\"/question/\"+elm.id}> {elm.question}</Link>\r\n            </li>;\r\n        const list = this.props.questions.map(mapFunction);\r\n\r\n\r\n\r\n        return(\r\n            <div>\r\n\r\n                <ul style={{listStyleType: \"none\"}}>\r\n                    {list}\r\n                </ul>\r\n\r\n                <AskQuestion style={{textAlign: \"center\"}} askQuestion={(text) => this.props.askQuestion(text)}/>\r\n\r\n\r\n\r\n            </div>\r\n\r\n\r\n\r\n        );\r\n\r\n    }\r\n}\r\n\r\nexport default Questions;","import React, {Component} from 'react';\r\n\r\n\r\nclass PostAnswer extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            input: \"\"\r\n        }\r\n    }\r\n\r\n    onChange(event) {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n\r\n    onSubmit(event) {\r\n        this.props.postAnswer(this.props.id, this.state.input);\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n<form>\r\n                <input name=\"input\" onChange={event => this.onChange(event)} type=\"text\"/>\r\n                <button onClick={_ => this.onSubmit()}>Post Answer</button>\r\n</form>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PostAnswer;\r\n\r\n","import React, {Component} from 'react';\r\nimport PostAnswer from './PostAnswer';\r\n\r\nclass Question extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.handleVote = this.handleVote.bind(this);\r\n    }\r\n\r\n    handleVote(event) {\r\n\r\n        let answerId = event.currentTarget.dataset.id;\r\n        //console.log(\"answerid\", answerId);\r\n        this.props.handleVote(this.props.id, answerId);\r\n\r\n\r\n\r\n    }\r\n    render() {\r\n        const id = this.props.id;\r\n        const question = this.props.getQuestion(id);\r\n\r\n        let content = \"Loading\";\r\n        let answers = [];\r\n        if (question) {\r\n            content = question.question;\r\n            if(question.answers){\r\n                answers = question.answers.map((answer,id) =>\r\n                    <div key={answer.id} id={answer.id}>\r\n                        <br />\r\n                        <div>{answer.text}</div>\r\n                        <div>Up votes: {answer.votes}</div>\r\n\r\n                        <button onClick={() => this.props.handleVote(this.props.id, answer.id)}>Vote up</button>\r\n\r\n                    </div>\r\n\r\n\r\n                );\r\n            }\r\n        }\r\n\r\n        return (\r\n            <>\r\n                <h2>Question</h2>\r\n                <p>{content}</p>\r\n                <h3>Answers</h3>\r\n                <form>\r\n                    <ul>\r\n                        {answers}\r\n                    </ul>\r\n                </form>\r\n\r\n                {/* PostAnswer */}\r\n                <PostAnswer id={id} postAnswer={(id, text) => this.props.postAnswer(id, text)}/>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Question;\r\n\r\n","import React, {Component} from 'react';\nimport Questions from './Questions';\nimport Question from './Question';\nimport { Router } from \"@reach/router\";\n\nclass App extends Component {\n    API_URL = process.env.REACT_APP_API_URL;\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            questions: []\n        }\n    }\n\n    componentDidMount() {\n        this.getData();\n    }\n\n    async getData() {\n        const url = `${this.API_URL}/questions`;\n        const result = await fetch(url);\n        let json = await result.json();\n        return this.setState({\n            questions: json\n        })\n    }\n\n    getQuestion(id) {\n        const question = this.state.questions.find(q => q.id === parseFloat(id));\n        return question;\n    }\n    putVote(questionId, answerId) {\n        const url = `${this.API_URL}/questions/`\n            .concat(questionId)\n            .concat(\"/answers/\")\n            .concat(answerId)\n            .concat(\"/votes\");\n        fetch(url, {\n            method: \"PUT\",\n            headers: {\n                \"Content-type\": \"application/json; charset=UTF-8\"\n            }\n        })\n            .then(response => response.json())\n            .then(json => {\n                console.log(\"result of upvoting\");\n                console.log(json);\n                this.getData();\n            });\n\n        this.getData();\n    }\n\n    handleVote(questionId, answerId) {\n        //PUT\n        this.putVote(questionId, answerId);\n        console.log(\"The link was clicked.\");\n    }\n\n\n    async postAnswer(id, text) {\n        console.log(\"postAnswer\", id, text);\n        const url = `${this.API_URL}/questions/${id}/answers`;\n\n        const response = await fetch(url, {\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            method: 'POST',\n            body: JSON.stringify({\n                text: text,\n                //answers: []\n            })\n        });\n        const data = await response.json();\n        console.log(\"Printing the response:\", data);\n\n    }\n    askQuestion(text) {\n\n        this.postData(text);\n    }\n\n    //Post method to post a new question\n    postData(text) {\n        const url = `${this.API_URL}/questions`;\n        fetch(url, {\n            method: \"POST\",\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                question: text,\n                array: []\n            }),\n\n        })\n            .then(response => response.json())\n            .then(json => {\n\n                console.log(json);\n\n                console.log(\"Result of posting a new question:\");\n                console.log(json.question.question)\n                this.getData();\n            });\n\n\n    }\n\n    render() {\n        return (\n            <>\n                <h1 style={{textAlign: \"center\", color: \"red\", fontSize:\"3em\"}}> Simple Q&A Site</h1>\n                <h2 style={{textAlign: \"center\", fontSize:\"2.5em\"}}>Questions</h2>\n                <Router>\n                    <Questions path=\"/\"\n                               questions={this.state.questions}\n                               askQuestion={question => this.askQuestion(question)}\n                    ></Questions>\n                    <Question path=\"/question/:id\"\n                              getQuestion={id => this.getQuestion(id)}\n                              handleVote={(questionId, answerId) =>\n                                  this.handleVote(questionId, answerId)\n                              }\n                              postAnswer={(id, text) => this.postAnswer(id, text)}\n                    ></Question>\n                    {/*<AskQuestion path=\"/new\" add={ (title, description) => this.addQuestion(title, description)}></AskQuestion>*/}\n                </Router>\n            </>\n        );\n    }\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}